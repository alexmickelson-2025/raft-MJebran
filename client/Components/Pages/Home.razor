@page "/"
@using logic;
@rendermode InteractiveServer

<PageTitle>Raft Simulation</PageTitle>

<h1>Raft Simulation</h1>

@if (!isRunning)
{
    <button class="btn btn-primary" @onclick="StartSimulation">Start Simulation</button>
}
else
{
    <button class="btn btn-danger" @onclick="StopSimulation">Stop Simulation</button>
}

<div>
    <label for="NetworkRequestDelay">
        Network Delay (ms):
        <input type="range" id="NetworkRequestDelay" min="0" max="2000" step="100"
            @bind="SimulationNode.NetworkRequestDelay" />
    </label>
</div>
<div>
    <label for="ElectionTimeoutMultiplier">
        Election Timeout Multiplier:
        <input type="range" id="ElectionTimeoutMultiplier" min="1" max="5" step="0.5"
            @bind="ElectionTimeoutMultiplier" />
    </label>
</div>

<div class="row">
    @foreach (var node in nodes)
    {
        <div class="col-md-4 p-2">
            <div class="border p-3">
                <h5>Node @node.Id</h5>
                <p>Status: <span>@node.State</span></p>
                <p>Current Term: <span>@node.CurrentTerm</span></p>
                <p>Leader:
                    <span>
                        @if (node.State == NodeState.Candidate)
                        {
                            @($"{node.Id} (Candidate)")
                        }
                        else if (node.State == NodeState.Leader)
                        {
                            @($"{node.Id} (Leader)")
                        }
                        else
                        {
                            <text>
                                @(node.CurrentLeaderId?.ToString() ?? "Unknown")
                            </text>
                        }
                    </span>
                </p>
                <p>Timeout:
                <div class="progress" role="progressbar" aria-label="Election timeout progress"
                    aria-valuenow="@node.InnerNode.ElectionTimeout" aria-valuemin="0" aria-valuemax="300">
                    <div class="progress-bar" style="width:@GetTimeoutPercentage(node)%"></div>
                </div>
                </p>
                <p>Message: <span>@node.Message</span></p>
                <div>
                    <button class="btn btn-outline-danger" @onclick="@(() => node.StopSimulationLoop())">Stop Node</button>
                    <button class="btn btn-outline-primary" @onclick="@(() => node.StartSimulationLoop())">Start
                        Node</button>
                </div>
            </div>
        </div>
    }
</div>


@code {
    private List<SimulationNode> nodes = new();
    private bool isRunning = false;
    private double ElectionTimeoutMultiplier = 1.0;

    private int GetTimeoutPercentage(SimulationNode node)
    {
        if (node.InnerNode == null || node.InnerNode.LastHeartbeat == default)
            return 0;

        var elapsedMs = (DateTime.UtcNow - node.InnerNode.LastHeartbeat).TotalMilliseconds;
        var remainingMs = node.InnerNode.ElectionTimeout - elapsedMs;

        return Math.Clamp((int)((remainingMs / node.InnerNode.ElectionTimeout) * 100), 0, 100);
    }

    private void StartSimulation()
    {
        var node1 = new RaftNode();
        var node2 = new RaftNode();
        var node3 = new RaftNode();

        var simNode1 = new SimulationNode(node1);
        var simNode2 = new SimulationNode(node2);
        var simNode3 = new SimulationNode(node3);

        node1.OtherNodes = new List<IRaftNode> { simNode2, simNode3 };
        node2.OtherNodes = new List<IRaftNode> { simNode1, simNode3 };
        node3.OtherNodes = new List<IRaftNode> { simNode1, simNode2 };

        nodes = new List<SimulationNode> { simNode1, simNode2, simNode3 };

        foreach (var node in nodes)
        {
            node.StartSimulationLoop();
        }

        isRunning = true;
    }

    private void StopSimulation()
    {
        foreach (var node in nodes)
        {
            node.StopSimulationLoop();
            node.InnerNode.State = NodeState.Candidate;
            node.Message = "Node transitioned to Candidate after stopping.";
        }

        isRunning = false;
        StateHasChanged();
    }
}
